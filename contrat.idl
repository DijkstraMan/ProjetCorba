module modEntreesSortiesZones
{
	typedef string EmpreinteCollab;
	
	typedef string Matricule;
	typedef string NomUsr;
	typedef string PrenomUsr;
	typedef string PasswordPerm;
	typedef string PhotoUsr;
	
	typedef long idZone;
	typedef string nomZone;
	typedef string JourDebut;
	typedef string JourFin;
	typedef long HeureDebut;
	typedef string HeureDebutString;
	typedef long HeureFin;
	typedef string HeureFinString;
	typedef string dateLog;
	typedef long IdPorte;
	enum TypeAcces {autorise, nonAutorise, nonAuthentifie}; 
	
	exception EmpreinteInconnue {string raison;};
	exception EmpreinteExistante {string raison;};
	exception UtilisateurInconnu {string raison;};
	exception UtilisateurExistant {string raison;};
	exception AutorisationExistante {string raison;};
	exception AutorisationInconnue {string raison;};
	
	struct Empreinte 
	{
		Matricule matricule;
		EmpreinteCollab empCollab;
	};

	struct Utilisateur
	{
		Matricule matricule;
		NomUsr nomUsr;
		PrenomUsr preUsr;
		PhotoUsr phoUsr;
	};

	struct AutorisationPerm
	{
		Matricule matricule;
		nomZone nomZone;
		HeureDebutString hrDebut;
		HeureFinString hrFin;
	};
	
	struct AutorisationTemp
	{
		Matricule matricule;
		nomZone nomZone;
		JourDebut jourDebut;
		JourFin jourFin;
	};
	
	struct LogAcces
	{
		Matricule matricule;
		idZone idZone;
		dateLog dateAcces;
		TypeAcces typeAcces;
	};
	
	struct Zone
	{
		idZone idZne;
		nomZone nomZne;
	};
	
	typedef sequence<Zone> lesZones;
	typedef sequence<Utilisateur> lesUtilisateurs;
    typedef sequence<LogAcces> logsAcces;
    typedef sequence<AutorisationPerm> lesAutorisationsPerm;
    typedef sequence<AutorisationTemp> lesAutorisationsTemp;
	
	interface ServiceAuthentification
	{
		
		Utilisateur getUtilisateur(in Matricule matricule) raises (UtilisateurInconnu);
		
		//verif d'indentité pour la porte
		Utilisateur verifierAuthentificationPorte(in EmpreinteCollab empCollab, in PhotoUsr phoUsr, in idZone zone) raises (UtilisateurInconnu, EmpreinteInconnue);
		
		//verif de connexion pour les resp
		boolean verifierAuthentificationLogicielResp(in Matricule matricule, in PasswordPerm pwd, in idZone zone) raises (UtilisateurInconnu);
		
		//verif de connexion pour les rh
		boolean verifierAuthentificationLogicielRH(in Matricule matricule, in PasswordPerm pwd) raises (UtilisateurInconnu);
		
		//verif de connexion pour l'accueil
		boolean verifierAuthentificationLogicielAccueil(in Matricule matricule, in PasswordPerm pwd) raises (UtilisateurInconnu);
		
		//Utilisateurs temporaires :
		void ajouterCollaborateurTemp(in Matricule matricule, in NomUsr nomUsr, in PrenomUsr preUsr, in PhotoUsr phoUsr) raises (UtilisateurExistant);
		void modifierCollaborateurTemp(in Matricule matricule, in NomUsr nomUsr, in PrenomUsr preUsr, in PhotoUsr phoUsr) raises (UtilisateurInconnu);
		//verif de connexion pour la machine empreinte :
		boolean verifierAuthentificationMachineEmpreinteCollaborateurTemp(in Matricule matricule) raises (UtilisateurInconnu);
		
		//Utilisateurs permanents :
		void ajouterCollaborateurPerm(in Matricule matricule, in NomUsr nomUsr, in PrenomUsr preUsr, in PhotoUsr phoUsr, in PasswordPerm pwd) raises (UtilisateurExistant);
		void modifierCollaborateurPerm(in Matricule matricule, in NomUsr nomUsr, in PrenomUsr preUsr, in PhotoUsr phoUsr) raises (UtilisateurInconnu);
		//verif de connexion pour la machine empreinte :
		boolean verifierAuthentificationMachineEmpreinteCollaborateurPerm(in Matricule matricule, in PasswordPerm pwd) raises (UtilisateurInconnu);
		
		//recuperer utilisateurs pour listes
		lesUtilisateurs getCollaborateursTemporaires();
		lesUtilisateurs getCollaborateursPermanents();
	};

	interface ServiceEmpreinte
	{
		//CRUD Empreinte
		boolean verifierEmpreinte(in EmpreinteCollab empCollab, in Matricule matricule) raises (EmpreinteInconnue);
		void ajouterEmpreinte(in EmpreinteCollab empCollab, in Matricule matricule) raises (EmpreinteExistante);
		void modifierEmpreinte(in EmpreinteCollab empCollab, in Matricule matricule) raises (EmpreinteInconnue);
                
                //Supprimer une empreinte de collaborateur temporaire
                void supprimerEmpreinteTemp(in Matricule matricule) raises (EmpreinteInconnue);

                //vérifier si le collaborateur a déjà enregistré une empreinte
                boolean verifierEmpreinteTempExistante(in Matricule matricule);
                boolean verifierEmpreintePermExistante(in Matricule matricule);
	};

	interface ServiceAutorisation
	{
		//responsable de zone
		boolean verifierAutorisation(in Matricule matricule, in idZone idZone) raises (AutorisationInconnue); 
		
		//Autorisations temporaires :
		void ajouterAutorisationTemp(in Matricule matricule, in idZone idZone, in JourDebut jrDebut, in JourFin jrFin) raises (AutorisationExistante);
		void modifierAutorisationTemp(in Matricule matricule, in idZone idZone, in JourDebut jrDebut, in JourFin jrFin) raises (AutorisationInconnue);
		
		//Autorisations permanentes :
		void ajouterAutorisationPerm(in Matricule matricule, in idZone idZone, in HeureDebut hrDebut, in HeureFin hrFin) raises (AutorisationExistante); 
		void modifierAutorisationPerm(in Matricule matricule, in idZone idZone, in HeureDebut hrDebut, in HeureFin hrFin) raises (AutorisationInconnue); 
		void supprimerAutorisation(in Matricule matricule, in idZone idZone) raises (AutorisationInconnue);
		
		//retourne l'idZone en fonction d'un id de porte
		idZone getIdZoneFromPorte(in IdPorte idPorte);
		//retourne les zones existantes
		lesZones getZone();
		
		//recuperer les autorisations pour les listes
		lesAutorisationsPerm getAutorisationPerm();
		lesAutorisationsTemp getAutorisationTemp();
	};
	
	interface ServiceJournalisation
	{
		void ajouterEntree(in Matricule matricule, in idZone idZone, in dateLog dateAcces, in TypeAcces typeAcces);
		logsAcces consulterAcces();
		logsAcces consulterRefus();
	};
};